<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xss on Simple Life Cloud Log</title>
    <link>https://cloudlog.kr/tags/xss/</link>
    <description>Recent content in Xss on Simple Life Cloud Log</description>
    <generator>Hugo 0.145.0</generator>
    <language>ko</language>
    <lastBuildDate>Fri, 28 Jan 2022 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://cloudlog.kr/tags/xss/rss.xml" rel="self" type="application/rss+xml" /><item>
      <title>PHP SQL Injection 방지 코드</title>
      <link>https://cloudlog.kr/docs/programming/php/sql-injection-function/</link>
      <pubDate>Fri, 28 Jan 2022 00:00:00 +0900</pubDate>
      <guid>https://cloudlog.kr/docs/programming/php/sql-injection-function/</guid>
      <description>&lt;h2 id=&#34;개요&#34;&gt;개요 &lt;a href=&#34;#%ea%b0%9c%ec%9a%94&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;웹개발을 하면서 항상 신경 쓰이는 것이 SQL Injection을 비롯한 각종 보안문제입니다.&#xA;특히나 외부에서(사용자로부터) 데이터를 입력 받아서 DB에 입력하는 기능이 핵심이기 때문에 어떤 문자열이 입력될지 알 수가 없다는 것이 신경쓰이는 부분입니다.&lt;/p&gt;&#xA;&lt;p&gt;사용자가 실수로 혹은 악의적인 목적을 가진 사람이 의도적으로 DB해킹을 목적으로 비정상적인 데이터를 입력하는 경우가 많기 때문에 해킹코드를 100% 막지는 못하더라도 최대한 막을 수 있도록 준비해두는 것이 필요합니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;화이트-리스트&#34;&gt;화이트 리스트 &lt;a href=&#34;#%ed%99%94%ec%9d%b4%ed%8a%b8-%eb%a6%ac%ec%8a%a4%ed%8a%b8&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;보안과 관련해서 흔히 얘기되는 중요한 원칙이 블랙리스트 방식이 아닌 화이트리스트 방식으로 해야 한다는 것입니다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>